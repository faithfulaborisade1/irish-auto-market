generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String         @id @default(cuid())
  email               String         @unique
  name                String?
  firstName           String
  lastName            String
  phone               String?
  avatar              String?
  role                UserRole       @default(USER)
  status              UserStatus     @default(ACTIVE)
  password            String?
  emailVerified       DateTime?
  // PASSWORD RESET FIELDS:
  resetToken          String?        // Hashed password reset token
  resetTokenExpiry    DateTime?      // When the reset token expires
  lastPasswordReset   DateTime?      // Track when password was last reset
  bio                 String?
  location            Json?
  preferences         Json?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  lastLoginAt         DateTime?
  accounts            Account[]
  inquiries           CarInquiry[]
  carLikes            CarLike[]
  cars                Car[]
  buyerConversations  Conversation[] @relation("BuyerConversations")
  sellerConversations Conversation[] @relation("SellerConversations")
  dealerProfile       DealerProfile?
  favorites           FavoriteCar[]
  sentMessages        Message[]
  notifications       Notification[]
  savedSearches       SavedSearch[]
  sessions            Session[]
  
  // ADMIN RELATIONS
  adminProfile        AdminProfile?
  revenueRecords      RevenueRecord[]
  
  // SUPPORT RELATIONS
  contactMessages     ContactMessage[]
  feedback            Feedback[]
  issueReports        IssueReport[]
  dealerReports       IssueReport[]    @relation("DealerReports")
  
  // ðŸ†• NEW DEALER INVITATION RELATION
  receivedInvitation  DealerInvitation?
  
  // ðŸ†• WEB ANALYTICS RELATIONS
  pageViews           PageView[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Car {
  id              String            @id @default(cuid())
  userId          String
  title           String
  make            String
  model           String
  year            Int
  price           Decimal           @db.Decimal(10, 2)
  currency        String            @default("EUR")
  mileage         Int?
  fuelType        FuelType?
  transmission    TransmissionType?
  engineSize      Decimal?          @db.Decimal(3, 1)
  bodyType        BodyType?
  doors           Int?
  seats           Int?
  color           String?
  condition       CarCondition      @default(USED)
  previousOwners  Int?
  nctExpiry       DateTime?
  serviceHistory  Boolean           @default(false)
  accidentHistory Boolean           @default(false)
  description     String?
  features        Json?
  location        Json?
  slug            String            @unique
  status          ListingStatus     @default(ACTIVE)
  featured        Boolean           @default(false)
  featuredUntil   DateTime?
  viewsCount      Int               @default(0)
  inquiriesCount  Int               @default(0)
  likesCount      Int               @default(0)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // ADMIN MODERATION FIELDS
  moderationStatus ModerationStatus @default(PENDING)
  moderatedBy     String?
  moderatedAt     DateTime?
  rejectionReason String?
  qualityScore    Int?
  qualityFlags    Json?
  
  images          CarImage[]
  inquiries       CarInquiry[]
  likes           CarLike[]
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations   Conversation[]
  favorites       FavoriteCar[]
  notifications   Notification[]
  priceHistory    PriceHistory[]
  
  // ADMIN RELATIONS
  featuredListings FeaturedListing[]
  revenueRecords   RevenueRecord[]
  
  // SUPPORT RELATION
  issueReports    IssueReport[]

  @@map("cars")
}

model CarImage {
  id           String   @id @default(cuid())
  carId        String
  originalUrl  String
  thumbnailUrl String
  mediumUrl    String
  largeUrl     String
  altText      String?
  orderIndex   Int
  fileSize     Int?
  uploadedAt   DateTime @default(now())
  car          Car      @relation(fields: [carId], references: [id], onDelete: Cascade)

  @@map("car_images")
}

model CarInquiry {
  id           String        @id @default(cuid())
  carId        String
  buyerId      String
  message      String
  contactPhone String?
  inquiryType  InquiryType   @default(GENERAL)
  status       InquiryStatus @default(NEW)
  createdAt    DateTime      @default(now())
  respondedAt  DateTime?
  response     String?
  buyer        User          @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  car          Car           @relation(fields: [carId], references: [id], onDelete: Cascade)

  @@map("car_inquiries")
}

model FavoriteCar {
  id        String   @id @default(cuid())
  userId    String
  carId     String
  createdAt DateTime @default(now())
  car       Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, carId])
  @@map("favorite_cars")
}

model SavedSearch {
  id             String         @id @default(cuid())
  userId         String
  name           String
  searchCriteria Json
  emailAlerts    Boolean        @default(true)
  alertFrequency AlertFrequency @default(DAILY)
  lastNotified   DateTime?
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now())
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("saved_searches")
}

model DealerProfile {
  id                   String           @id @default(cuid())
  userId               String           @unique
  businessName         String
  businessRegistration String?
  vatNumber            String?
  description          String?
  logo                 String?
  website              String?
  businessHours        Json?
  specialties          Json?
  subscriptionType     SubscriptionType @default(BASIC)
  subscriptionExpires  DateTime?
  verified             Boolean          @default(false)
  verifiedAt           DateTime?
  createdAt            DateTime         @default(now())
  updatedAt            DateTime         @updatedAt
  user                 User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("dealer_profiles")
}

model CarLike {
  id        String   @id @default(cuid())
  userId    String
  carId     String
  createdAt DateTime @default(now())
  car       Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, carId])
  @@map("car_likes")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  carId     String?
  read      Boolean          @default(false)
  actionUrl String?
  metadata  Json?
  createdAt DateTime         @default(now())
  car       Car?             @relation(fields: [carId], references: [id], onDelete: Cascade)
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model PriceHistory {
  id        String   @id @default(cuid())
  carId     String
  oldPrice  Decimal  @db.Decimal(10, 2)
  newPrice  Decimal  @db.Decimal(10, 2)
  changedAt DateTime @default(now())
  car       Car      @relation(fields: [carId], references: [id], onDelete: Cascade)

  @@map("price_history")
}

model Conversation {
  id             String             @id @default(cuid())
  carId          String
  buyerId        String
  sellerId       String
  status         ConversationStatus @default(ACTIVE)
  lastMessageAt  DateTime?
  lastMessage    String?
  lastMessageBy  String?
  buyerLastRead  DateTime?
  sellerLastRead DateTime?
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  buyer          User               @relation("BuyerConversations", fields: [buyerId], references: [id], onDelete: Cascade)
  car            Car                @relation(fields: [carId], references: [id], onDelete: Cascade)
  seller         User               @relation("SellerConversations", fields: [sellerId], references: [id], onDelete: Cascade)
  messages       Message[]

  @@unique([carId, buyerId])
  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  senderId       String
  content        String
  messageType    MessageType  @default(TEXT)
  attachments    Json?
  readAt         DateTime?
  editedAt       DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// ============================================================================
// ðŸ†• NEW DEALER INVITATION MODEL
// ============================================================================

model DealerInvitation {
  id              String   @id @default(cuid())
  
  // Basic Information
  email           String
  businessName    String?
  contactName     String?
  phone           String?
  location        String?  // County/city
  
  // ðŸ†• ADD THIS MISSING FIELD:
  registrationToken String @unique  // Secure token for registration link
  
  // Status Tracking
  status          InvitationStatus @default(SENT)
  sentAt          DateTime @default(now())
  viewedAt        DateTime?
  registeredAt    DateTime?
  
  // Admin Who Sent Invitation
  invitedBy       String   // AdminProfile ID
  admin           AdminProfile @relation(fields: [invitedBy], references: [id])
  
  // If Dealer Registers
  dealerUserId    String?  @unique
  dealerUser      User?    @relation(fields: [dealerUserId], references: [id])
  
  // Tracking Data
  ipAddress       String?
  userAgent       String?
  source          String?  // 'admin_dashboard', 'bulk_import'
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([email])
  @@index([status, sentAt])
  @@index([invitedBy])
  @@index([registrationToken])  // This index was there but field was missing!
  @@map("dealer_invitations")
}

// ============================================================================
// SUPPORT MODELS
// ============================================================================

model ContactMessage {
  id            String           @id @default(cuid())
  
  // Contact Information
  name          String
  email         String
  phone         String?
  subject       String
  message       String           @db.Text
  
  // Classification
  category      ContactCategory  @default(GENERAL)
  priority      MessagePriority  @default(MEDIUM)
  
  // User Information (optional - for logged-in users)
  userId        String?
  user          User?            @relation(fields: [userId], references: [id])
  
  // Status Tracking
  status        MessageStatus    @default(NEW)
  assignedTo    String?          // Admin ID
  assignedAdmin AdminProfile?    @relation("AssignedContacts", fields: [assignedTo], references: [id])
  
  // Response Tracking
  responded     Boolean          @default(false)
  respondedAt   DateTime?
  respondedBy   String?          // Admin ID
  response      String?          @db.Text
  
  // Metadata
  ipAddress     String?
  userAgent     String?
  source        String?          // 'website', 'mobile_app', etc.
  
  // Timestamps
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  @@index([status, createdAt])
  @@index([category, priority])
  @@index([email])
  @@map("contact_messages")
}

model Feedback {
  id            String           @id @default(cuid())
  
  // User Information
  userId        String?
  user          User?            @relation(fields: [userId], references: [id])
  
  // Anonymous feedback support
  email         String?
  name          String?
  
  // Feedback Content
  type          FeedbackType     @default(GENERAL)
  rating        Int?             // 1-5 stars
  subject       String?
  message       String           @db.Text
  
  // Context
  pageUrl       String?          // What page they were on
  feature       String?          // What feature they're giving feedback about
  
  // Classification
  category      FeedbackCategory @default(GENERAL)
  priority      MessagePriority  @default(LOW)
  
  // Admin Response
  status        FeedbackStatus   @default(NEW)
  assignedTo    String?          // Admin ID
  assignedAdmin AdminProfile?    @relation("AssignedFeedback", fields: [assignedTo], references: [id])
  
  adminNotes    String?          @db.Text
  responded     Boolean          @default(false)
  respondedAt   DateTime?
  respondedBy   String?          // Admin ID
  response      String?          @db.Text
  
  // Metadata
  ipAddress     String?
  userAgent     String?
  browserInfo   Json?
  
  // Timestamps
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  @@index([type, rating])
  @@index([status, createdAt])
  @@index([userId])
  @@map("feedback")
}

model IssueReport {
  id            String           @id @default(cuid())
  
  // Reporter Information
  reporterId    String?          // User ID if logged in
  reporter      User?            @relation(fields: [reporterId], references: [id])
  
  // Anonymous reporting support
  reporterEmail String?
  reporterName  String?
  
  // Issue Details
  type          IssueType        @default(BUG)
  severity      IssueSeverity    @default(MEDIUM)
  title         String
  description   String           @db.Text
  
  // Context
  pageUrl       String?          // Where the issue occurred
  carId         String?          // If reporting a specific car
  car           Car?             @relation(fields: [carId], references: [id])
  dealerId      String?          // If reporting a dealer
  dealer        User?            @relation("DealerReports", fields: [dealerId], references: [id])
  
  // Evidence
  screenshots   Json?            // Array of screenshot URLs
  attachments   Json?            // Array of attachment URLs
  
  // Technical Details
  browserInfo   Json?            // Browser, OS, device info
  errorDetails  String?          @db.Text
  stepsToReproduce String?       @db.Text
  
  // Status Tracking
  status        ReportStatus     @default(NEW)
  assignedTo    String?          // Admin ID
  assignedAdmin AdminProfile?    @relation("AssignedReports", fields: [assignedTo], references: [id])
  
  // Resolution
  resolved      Boolean          @default(false)
  resolvedAt    DateTime?
  resolvedBy    String?          // Admin ID
  resolution    String?          @db.Text
  
  // Admin Notes
  adminNotes    String?          @db.Text
  internalNotes String?          @db.Text
  
  // Metadata
  ipAddress     String?
  userAgent     String?
  source        String?          // 'web', 'mobile', etc.
  
  // Timestamps
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  @@index([type, severity])
  @@index([status, createdAt])
  @@index([reporterId])
  @@index([carId])
  @@index([dealerId])
  @@map("issue_reports")
}

// ============================================================================
// ADMIN MODELS
// ============================================================================

model AdminProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  
  adminRole       AdminRole
  permissions     Json
  department      String?
  
  twoFactorEnabled Boolean  @default(false)
  twoFactorSecret  String?
  backupCodes      Json?
  ipWhitelist      Json?
  
  maxSessions      Int      @default(3)
  sessionTimeout   Int      @default(1800)
  
  title           String?
  bio             String?
  avatar          String?
  
  isActive        Boolean   @default(true)
  lastLoginAt     DateTime?
  failedLoginAttempts Int   @default(0)
  lockedUntil     DateTime?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  auditLogs       AdminAuditLog[]
  sessions        AdminSession[]
  featuredListings FeaturedListing[]
  
  // SUPPORT RELATIONS
  assignedContacts  ContactMessage[] @relation("AssignedContacts")
  assignedFeedback  Feedback[]       @relation("AssignedFeedback")
  assignedReports   IssueReport[]    @relation("AssignedReports")
  
  // ðŸ†• NEW DEALER INVITATION RELATION
  dealerInvitations DealerInvitation[]
  
  @@map("admin_profiles")
}

model AdminAuditLog {
  id              String   @id @default(cuid())
  adminId         String
  
  action          AdminAction
  resourceType    ResourceType
  resourceId      String?
  
  oldValues       Json?
  newValues       Json?
  description     String?
  
  ipAddress       String
  userAgent       String?
  endpoint        String?
  
  severity        LogSeverity @default(INFO)
  tags            Json?
  
  createdAt       DateTime @default(now())
  
  admin           AdminProfile @relation(fields: [adminId], references: [id], onDelete: Cascade)
  
  @@index([action, createdAt])
  @@index([resourceType, resourceId])
  @@index([adminId, createdAt])
  @@map("admin_audit_logs")
}

model AdminSession {
  id              String   @id @default(cuid())
  adminId         String
  
  sessionToken    String   @unique
  refreshToken    String?
  
  deviceInfo      Json?
  ipAddress       String
  location        Json?
  
  isActive        Boolean  @default(true)
  revokedAt       DateTime?
  revokedReason   String?
  
  createdAt       DateTime @default(now())
  lastAccessedAt  DateTime @default(now())
  expiresAt       DateTime
  
  admin           AdminProfile @relation(fields: [adminId], references: [id], onDelete: Cascade)
  
  @@index([adminId, isActive])
  @@index([expiresAt])
  @@map("admin_sessions")
}

model FeaturedListing {
  id              String   @id @default(cuid())
  carId           String
  adminId         String
  
  featuredType    FeaturedType @default(HOMEPAGE)
  position        Int?
  
  pricePaid       Decimal  @db.Decimal(10, 2)
  currency        String   @default("EUR")
  
  startDate       DateTime @default(now())
  endDate         DateTime
  
  status          FeaturedStatus @default(ACTIVE)
  paymentStatus   PaymentStatus @default(PENDING)
  
  impressions     Int      @default(0)
  clicks          Int      @default(0)
  inquiries       Int      @default(0)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  car             Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  admin           AdminProfile @relation(fields: [adminId], references: [id])
  
  @@map("featured_listings")
}

model SystemSetting {
  id              String   @id @default(cuid())
  
  key             String   @unique
  value           Json
  
  category        SettingCategory
  dataType        SettingDataType
  description     String
  isPublic        Boolean  @default(false)
  
  validationRules Json?
  defaultValue    Json?
  
  lastChangedBy   String?
  lastChangedAt   DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("system_settings")
}

model SecurityEvent {
  id              String   @id @default(cuid())
  
  eventType       SecurityEventType
  severity        SecuritySeverity
  description     String
  
  targetUserId    String?
  targetIP        String?
  targetResource  String?
  
  userAgent       String?
  endpoint        String?
  requestData     Json?
  
  blocked         Boolean  @default(false)
  action          String?
  
  detectionMethod String?
  riskScore       Int?
  
  resolved        Boolean  @default(false)
  resolvedBy      String?
  resolvedAt      DateTime?
  resolution      String?
  
  createdAt       DateTime @default(now())
  
  @@index([eventType, createdAt])
  @@index([severity, resolved])
  @@index([targetUserId])
  @@index([targetIP])
  @@map("security_events")
}

model RevenueRecord {
  id              String   @id @default(cuid())
  
  source          RevenueSource
  sourceId        String?
  carId           String?
  
  amount          Decimal  @db.Decimal(10, 2)
  currency        String   @default("EUR")
  fee             Decimal? @db.Decimal(10, 2)
  
  transactionId   String?
  paymentMethod   PaymentMethod?
  paymentStatus   PaymentStatus
  
  billingPeriodStart DateTime?
  billingPeriodEnd   DateTime?
  
  userId          String
  userType        UserRole
  
  processedAt     DateTime?
  reconciled      Boolean  @default(false)
  reconciledAt    DateTime?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User     @relation(fields: [userId], references: [id])
  car             Car?     @relation(fields: [carId], references: [id])
  
  @@index([source, createdAt])
  @@index([paymentStatus])
  @@index([userId, createdAt])
  @@map("revenue_records")
}

// ============================================================================
// EXISTING ENUMS
// ============================================================================

enum UserRole {
  USER
  DEALER
  ADMIN
  SUPER_ADMIN
  CONTENT_MOD
  FINANCE_ADMIN
  SUPPORT_ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING_VERIFICATION
}

enum FuelType {
  PETROL
  DIESEL
  ELECTRIC
  HYBRID
  PLUGIN_HYBRID
  LPG
  CNG
}

enum TransmissionType {
  MANUAL
  AUTOMATIC
  SEMI_AUTOMATIC
  CVT
}

enum BodyType {
  HATCHBACK
  SALOON
  ESTATE
  SUV
  COUPE
  CONVERTIBLE
  MPV
  VAN
  PICKUP
  OTHER
}

enum CarCondition {
  NEW
  USED
  CERTIFIED_PRE_OWNED
}

enum ListingStatus {
  ACTIVE
  SOLD
  PENDING
  EXPIRED
  DRAFT
}

enum InquiryType {
  GENERAL
  PRICE_NEGOTIATION
  VIEWING_REQUEST
  FINANCE_INQUIRY
  TRADE_IN
}

enum InquiryStatus {
  NEW
  READ
  RESPONDED
  CLOSED
}

enum AlertFrequency {
  INSTANT
  DAILY
  WEEKLY
  MONTHLY
}

enum SubscriptionType {
  BASIC
  PREMIUM
  ENTERPRISE
}

enum NotificationType {
  CAR_LIKED
  PRICE_DROP
  CAR_SOLD
  INQUIRY_RECEIVED
  SYSTEM_UPDATE
  MESSAGE_RECEIVED
  CONTACT_RECEIVED
  FEEDBACK_RECEIVED
  ISSUE_REPORTED
  DEALER_INVITED      // ðŸ†• NEW
}

enum ConversationStatus {
  ACTIVE
  ARCHIVED
  BLOCKED
}

enum MessageType {
  TEXT
  IMAGE
  SYSTEM
}

// ============================================================================
// ADMIN ENUMS
// ============================================================================

enum AdminRole {
  SUPER_ADMIN
  CONTENT_MOD
  FINANCE_ADMIN
  SUPPORT_ADMIN
}

enum AdminAction {
  USER_CREATED
  USER_VERIFIED
  USER_SUSPENDED
  USER_DELETED
  USER_PASSWORD_RESET
  CAR_APPROVED
  CAR_REJECTED
  CAR_FEATURED
  CAR_DELETED
  CAR_EDITED
  PAYMENT_PROCESSED
  REFUND_ISSUED
  SUBSCRIPTION_CHANGED
  SETTING_CHANGED
  BACKUP_CREATED
  SYSTEM_MAINTENANCE
  SECURITY_EVENT
  USER_BANNED
  IP_BLOCKED
  CONTACT_RESPONDED
  FEEDBACK_REVIEWED
  ISSUE_RESOLVED
  DEALER_INVITED      // ðŸ†• NEW
  BULK_INVITES_SENT   // ðŸ†• NEW
}

enum ResourceType {
  USER
  CAR
  DEALER_PROFILE
  FEATURED_LISTING
  CONVERSATION
  MESSAGE
  SYSTEM_SETTING
  REVENUE_RECORD
  CONTACT_MESSAGE
  FEEDBACK
  ISSUE_REPORT
  DEALER_INVITATION   // ðŸ†• NEW
}

enum LogSeverity {
  DEBUG
  INFO
  WARNING
  ERROR
  CRITICAL
}

enum FeaturedType {
  HOMEPAGE
  CATEGORY
  PREMIUM
  NEWSLETTER
}

enum FeaturedStatus {
  PENDING
  ACTIVE
  EXPIRED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  PAYPAL
  STRIPE
}

enum ModerationStatus {
  PENDING
  APPROVED
  REJECTED
  UNDER_REVIEW
  FLAGGED
}

enum SettingCategory {
  GENERAL
  SECURITY
  EMAIL
  PAYMENT
  FEATURES
  LIMITS
  ANALYTICS
}

enum SettingDataType {
  STRING
  NUMBER
  BOOLEAN
  JSON
  ARRAY
}

enum SecurityEventType {
  FAILED_LOGIN
  BRUTE_FORCE_ATTEMPT
  SUSPICIOUS_ACTIVITY
  RATE_LIMIT_EXCEEDED
  UNAUTHORIZED_ACCESS
  DATA_BREACH_ATTEMPT
  SPAM_DETECTED
  BOT_DETECTED
}

enum SecuritySeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum RevenueSource {
  FEATURED_LISTING
  DEALER_SUBSCRIPTION
  PREMIUM_USER
  ADVERTISING
  COMMISSION
  OTHER
}

enum ContactCategory {
  GENERAL
  TECHNICAL_SUPPORT
  BILLING
  DEALER_INQUIRY
  PARTNERSHIP
  MEDIA_INQUIRY
  LEGAL
  COMPLAINT
  SUGGESTION
}

enum MessagePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MessageStatus {
  NEW
  ASSIGNED
  IN_PROGRESS
  WAITING_FOR_INFO
  RESOLVED
  CLOSED
}

enum FeedbackType {
  GENERAL
  BUG_REPORT
  FEATURE_REQUEST
  USABILITY
  PERFORMANCE
  CONTENT_QUALITY
  MOBILE_EXPERIENCE
  SEARCH_EXPERIENCE
}

enum FeedbackCategory {
  GENERAL
  USER_INTERFACE
  FUNCTIONALITY
  PERFORMANCE
  MOBILE
  SEARCH
  MESSAGING
  DEALER_TOOLS
  ADMIN_TOOLS
}

enum FeedbackStatus {
  NEW
  REVIEWED
  PLANNED
  IN_PROGRESS
  IMPLEMENTED
  REJECTED
  DUPLICATE
}

enum IssueType {
  BUG
  SCAM_LISTING
  INAPPROPRIATE_CONTENT
  FAKE_DEALER
  PRICING_ERROR
  SPAM
  HARASSMENT
  TECHNICAL_ISSUE
  SECURITY_CONCERN
  DATA_PRIVACY
  OTHER
}

enum IssueSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum ReportStatus {
  NEW
  ASSIGNED
  INVESTIGATING
  IN_PROGRESS
  RESOLVED
  CLOSED
  DUPLICATE
  INVALID
}

// ============================================================================
// ðŸ†• NEW DEALER INVITATION ENUM
// ============================================================================

enum InvitationStatus {
  SENT           // Email sent successfully
  VIEWED         // Email opened by recipient
  REGISTERED     // Dealer completed registration
  ALREADY_MEMBER // Email belongs to existing user
}

// ============================================================================
// WEB ANALYTICS MODELS - NEW ADDITION (Safe to add, won't affect existing data)
// ============================================================================

model PageView {
  id            String   @id @default(cuid())
  
  // Page Information
  path          String
  title         String?
  referrer      String?
  
  // Visitor Information
  visitorId     String
  visitor       Visitor  @relation(fields: [visitorId], references: [id])
  
  // Session Information
  sessionId     String
  session       VisitorSession @relation(fields: [sessionId], references: [id])
  
  // User Information (if logged in)
  userId        String?
  user          User?    @relation(fields: [userId], references: [id])
  
  // Technical Details
  userAgent     String?
  browser       String?
  device        String?
  os            String?
  
  // Location
  ipAddress     String?
  country       String?
  city          String?
  
  // Timestamps
  viewedAt      DateTime @default(now())
  
  @@index([path, viewedAt])
  @@index([visitorId, viewedAt])
  @@index([sessionId])
  @@index([userId])
  @@map("page_views")
}

model Visitor {
  id            String   @id @default(cuid())
  
  // Visitor Identification
  fingerprint   String   @unique // Browser fingerprint
  
  // Location
  ipAddress     String?
  country       String?
  countryCode   String?
  city          String?
  region        String?
  
  // Device Information
  userAgent     String?
  browser       String?
  browserVersion String?
  device        String?
  deviceType    String?  // desktop, mobile, tablet
  os            String?
  osVersion     String?
  
  // First Visit
  firstVisitAt  DateTime @default(now())
  lastVisitAt   DateTime @default(now())
  
  // Visit Stats
  totalVisits   Int      @default(1)
  totalPageViews Int     @default(0)
  
  // Relations
  pageViews     PageView[]
  sessions      VisitorSession[]
  
  @@index([fingerprint])
  @@index([country, city])
  @@index([deviceType])
  @@index([firstVisitAt])
  @@map("visitors")
}

model VisitorSession {
  id            String   @id @default(cuid())
  
  // Session Information
  visitorId     String
  visitor       Visitor  @relation(fields: [visitorId], references: [id])
  
  // Session Details
  startedAt     DateTime @default(now())
  lastActivityAt DateTime @default(now())
  endedAt       DateTime?
  durationMs    Int?     // Duration in milliseconds
  
  // Entry/Exit
  entryPage     String
  exitPage      String?
  referrer      String?
  
  // Live Tracking
  isActive      Boolean  @default(true)
  currentPage   String?
  lastHeartbeat DateTime @default(now())
  
  // Session Stats
  pageViewCount Int      @default(0)
  bounced       Boolean  @default(false) // True if only 1 page view
  
  // Relations
  pageViews     PageView[]
  
  @@index([visitorId, startedAt])
  @@index([startedAt])
  @@index([bounced])
  @@map("visitor_sessions")
}

model DailyAnalytics {
  id            String   @id @default(cuid())
  
  // Date
  date          DateTime @unique @db.Date
  
  // Visitor Metrics
  uniqueVisitors Int     @default(0)
  totalVisitors  Int     @default(0)
  newVisitors    Int     @default(0)
  returningVisitors Int  @default(0)
  
  // Page View Metrics
  totalPageViews Int     @default(0)
  avgPageViewsPerVisitor Decimal @default(0) @db.Decimal(10, 2)
  
  // Session Metrics
  totalSessions  Int     @default(0)
  avgSessionDuration Int @default(0) // in seconds
  bounceRate     Decimal @default(0) @db.Decimal(5, 2)
  
  // Top Content
  topPages       Json?   // Array of {path, views}
  topCountries   Json?   // Array of {country, visitors}
  topDevices     Json?   // Array of {device, visitors}
  topBrowsers    Json?   // Array of {browser, visitors}
  
  @@index([date])
  @@map("daily_analytics")
}